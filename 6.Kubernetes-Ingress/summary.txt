------------Kubernetes (LoadBalancer & Ingress)-----------

Both are used to expose internal applications to the external world.
1.LoadBalancer:
    Used to expose a single service with a public IP.
    Can work independently without Ingress.
    Sends external traffic directly to the pods via the service.

2.Ingress:
    Used to expose multiple services through a single LoadBalancer IP.
    Routes traffic based on domain name or URL path (e.g., /api, /web).
    Requires an Ingress Controller (like Nginx) to operate.
    If it's not available, we have to write manually that file for LB.So basically using ingress 2 file is required, one is LB and one ingress-rules.Typicaly LB is present like we get in Nginx.
    Cannot work alone — always needs a LoadBalancer or NodePort beneath it.

-> LoadBalancer works alone, while Ingress works with a LoadBalancer for efficient multi-service routing.

 

------------ Ingress in Kubernetes — Summary ----------------------

1.Ingress is used to manage and route external HTTP/HTTPS traffic to internal services inside the cluster.
2.It works at Layer 7 (Application Layer) — understands URLs, domains, and paths.
3.Main Purpose: Instead of creating multiple LoadBalancers for each service, Ingress allows routing through one single LoadBalancer.
4.Ingress Controller (like Nginx, Traefik, HAProxy) implements the rules defined in the Ingress resource.
5.Ingress rules decide where traffic goes, e.g.: /api → backend-service ,
                                                /app → frontend-service ,
                                               api.example.com → api-service

6.Ingress also supports SSL/TLS termination, path rewrites, and redirects easily.
7.Usually, a cloud LoadBalancer sits in front of the Ingress Controller — LB forwards traffic to it.
8.Recommended setup:
    Use LoadBalancer + Ingress Controller together — 1 LB handles all incoming traffic;
    Ingress routes it internally.

9.If only LoadBalancer used: One LB per service → expensive & less flexible.
                            Works fine for a single app only.

10.Preferred choice:LoadBalancer + Ingress 
        → cost-efficient, scalable, supports multiple services, and easy SSL management.


------------------- Minikube — Summary --------------------

1.Minikube is a lightweight Kubernetes setup used to run a single-node cluster locally on your laptop or PC.
2.It helps developers learn, test, and practice Kubernetes without needing cloud or multiple machines.
3.It installs all Control Plane + Worker Node components inside one virtual machine.
4.Works with Docker, VirtualBox, or Hyper-V as drivers to create the virtual environment.
5.You can deploy pods, services, and test complete Kubernetes functionality locally.
6.Command examples:
    minikube start → Start local cluster
    minikube stop → Stop the cluster
    minikube dashboard → Open Kubernetes dashboard
    minikube delete → Delete cluster

7.By default, Minikube uses only ClusterIP and NodePort service types (no external LoadBalancer).
8.To test LoadBalancer services locally, we need to install MetalLB inside Minikube.
9.Use case: Best for local Kubernetes learning, development, and debugging.
10.In short:  Minikube = “Our personal local Kubernetes lab.”


--------------------- MetalLB — Summary ------------------------

1.MetalLB is a LoadBalancer implementation for bare-metal or local clusters (like Minikube, not cloud).
2.In cloud (AWS/GCP), LoadBalancer service is created automatically — but on local systems, there’s no built-in LB.
3.MetalLB simulates cloud LoadBalancer behavior by assigning local IPs to LoadBalancer-type services.
4.It works in two modes:
   Layer 2 mode: Uses ARP to announce IP directly on the local network.
   BGP mode: Uses routing protocol for advanced setups (for real servers).

5.Purpose: Allows you to use type: LoadBalancer services in Minikube or on-prem servers.
6.Installation Example:
    kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/main/config/manifests/metallb-native.yaml

7.After installation, you create an IP address pool for MetalLB to assign LoadBalancer IPs.
8.Then your LoadBalancer-type services will get an external IP (local) that you can access in your browser.
9.Use case: To test real-world LB setup in Minikube, Docker Desktop, or bare-metal servers.
10.In short: MetalLB = “Local LoadBalancer for Minikube and non-cloud Kubernetes.”